%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h"
#include "table.h"
#include "absyn.h"

A_exp absyn_root;

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
    A_exp exp;
    A_expList explist;
    A_var var;
    A_dec dec;
    A_decList decs;
    A_ty ty;
    A_fundec fundec;
    A_fundecList fundecList;
    A_nametyList tydecList;
    A_fieldList tyfields;
    A_field tyfield;
    A_namety tydec;
    A_efield efield;
    A_efieldList efieldList;
	}

%nonassoc LOWEST
%nonassoc FUNCTION TYPE
%right ASSIGN
%nonassoc THEN
%nonassoc ELSE DO OF
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS


%token <sval> ID STRING
%token <ival> INT
%type <exp> exp
%type <dec> dec vardec
%type <decs> decs
%type <fundec> fundec
%type <fundecList> fundecList
%type <tydecList> tydecList
%type <tyfield> tyfield
%type <tyfields> tyfields
%type <tydec> tydec
%type <ty> ty
%type <var> lvalue lvalue_no_id lvalue_post
%type <explist> explist expseq
%type <efieldList> recordlist
%type <efield> record

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 
  UMINUS

%start program

%%

program:	exp {absyn_root = $1;}

decs:   dec decs {$$ = A_DecList($1, $2);}
    |   {$$ = NULL;}

dec:    tydecList {$$ = A_TypeDec(EM_tokPos, $1);}
   |    vardec {$$ = $1;}
   |    fundecList {$$ = A_FunctionDec(EM_tokPos, $1);}

tydecList: tydec tydecList {$$ = A_NametyList($1, $2);}
         | tydec %prec LOWEST {$$ = A_NametyList($1, NULL);}

tydec:  TYPE ID EQ ty {$$ = A_Namety(S_Symbol($2), $4);}

ty: ID {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
  | LBRACE tyfields RBRACE {$$ = A_RecordTy(EM_tokPos, $2);}
  | ARRAY OF ID {$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}


tyfields:    tyfield COMMA tyfields {$$ = A_FieldList($1, $3);}
        |    tyfield {$$ = A_FieldList($1, NULL);}
        |            {$$ = NULL;}

tyfield:    ID COLON ID {$$ = A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3));}


fundecList: fundec fundecList {$$ = A_FundecList($1, $2);}
          | fundec %prec LOWEST {$$ = A_FundecList($1, NULL);}

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);}

vardec: VAR ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
      | VAR ID COLON ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

lvalue: ID {$$ = A_SimpleVar(EM_tokPos, S_Symbol($1));}
      | lvalue_no_id {$$ = $1;}

lvalue_no_id:   lvalue DOT ID {$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
            |   lvalue_post {$$ = $1;}

lvalue_post:    ID LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)),$3);}
           |    lvalue_no_id LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}

exp:    lvalue {$$ = A_VarExp(EM_tokPos, $1);}
   |    NIL {$$ = A_NilExp(EM_tokPos);}
   |    LPAREN expseq RPAREN {$$ = A_SeqExp(EM_tokPos, $2);}
   |    LPAREN RPAREN {$$ = A_SeqExp(EM_tokPos, NULL);}
   |    INT  {$$ = A_IntExp(EM_tokPos, $1);}
   |    exp PLUS exp {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
   |    exp TIMES exp {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
   |    exp DIVIDE exp {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
   |    exp MINUS exp {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
   |    exp EQ exp {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
   |    exp NEQ exp {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
   |    exp GT exp {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
   |    exp GE exp {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
   |    exp LT exp {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
   |    exp LE exp {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
   |    exp AND exp {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
   |    exp OR exp {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos,1), $3);}
   |    MINUS exp   %prec UMINUS {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
   |    STRING {$$ = A_StringExp(EM_tokPos, $1);}
   |    ID LPAREN explist RPAREN {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}
   |    ID LPAREN RPAREN {$$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL);}
   |    ID LBRACK exp RBRACK OF exp {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}
   |    ID LBRACE recordlist RBRACE {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}
   |    ID LBRACE RBRACE {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), NULL);}
   |    lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}
   |    IF exp THEN exp ELSE exp {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
   |    IF exp THEN exp {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
   |    WHILE exp DO exp {$$ = A_WhileExp(EM_tokPos, $2, $4);}
   |    FOR ID ASSIGN exp TO exp DO exp {$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
   |    BREAK {$$ = A_BreakExp(EM_tokPos);}
   |    LET decs IN expseq END {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}


explist:    exp COMMA explist {$$ = A_ExpList($1, $3);}
       |    exp {$$ = A_ExpList($1, NULL);}

expseq:     exp SEMICOLON expseq {$$ = A_ExpList($1, $3);}
      |     exp {$$ = A_ExpList($1, NULL);}

recordlist: record COMMA recordlist {$$ = A_EfieldList($1, $3);}
          | record {$$ = A_EfieldList($1, NULL);}

record: ID EQ exp {$$ = A_Efield(S_Symbol($1), $3);}
